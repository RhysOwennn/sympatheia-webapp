{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\King Riz\\\\Downloads\\\\insta-repo-app-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\King Riz\\\\Downloads\\\\insta-repo-app-master\\\\src\\\\Pages\\\\Canvas\\\\Canvas.js\";\nimport React, { useRef, useEffect, useState } from 'react';\n\nfunction Canvas() {\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isDrawing = _useState2[0],\n        setIsDrawing = _useState2[1];\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    const context = canvas.getContext('2d');\n    context.lineCap = \"round\";\n    context.strokeStyle = \"#8CA99A\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n  }, []);\n\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    const offsetX = nativeEvent.offsetX,\n          offsetY = nativeEvent.offsetY;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const offsetX = nativeEvent.offsetX,\n          offsetY = nativeEvent.offsetY;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  return React.createElement(\"canvas\", {\n    onMouseDown: startDrawing,\n    onMouseUp: finishDrawing,\n    onMouseMove: draw,\n    ref: canvasRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  });\n}\n\nexport default Canvas; // constructor(x, y){\n//     this.x = x;\n//     this.y = y;\n//     this.speedX = Math.random() * 4 - 2;\n//     this.speedY = Math.random() * 4 - 2;\n//     this.maxSize = Math.random() * 7 + 5;\n//     this.size = Math.random() * 1 + 2;\n// }\n// update(){\n//     ctx = canvas.getContext('2d')\n//     this.x += this.speedX;\n//     this.y += this.speedY;\n//     this.size += 0.1;\n//     if (this.size < this.maxSize){\n//         ctx.beginPath();\n//         ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//         ctx.fillStyle = 'hsl(140,100%,50%)';\n//         ctx.fill();\n//         ctx.stroke();\n//     }\n// }","map":{"version":3,"sources":["C:\\Users\\King Riz\\Downloads\\insta-repo-app-master\\src\\Pages\\Canvas\\Canvas.js"],"names":["React","useRef","useEffect","useState","Canvas","canvasRef","contextRef","isDrawing","setIsDrawing","canvas","current","width","window","innerWidth","height","innerHeight","context","getContext","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","draw","lineTo","stroke"],"mappings":";;AACA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;;AAIA,SAASC,MAAT,GAAiB;AAEb,QAAMC,SAAS,GAAGJ,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMK,UAAU,GAAGL,MAAM,CAAC,IAAD,CAAzB;;AAHa,oBAIqBE,QAAQ,CAAC,KAAD,CAJ7B;AAAA;AAAA,QAINI,SAJM;AAAA,QAIKC,YAJL;;AAMbN,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMO,MAAM,GAAGJ,SAAS,CAACK,OAAzB;AACAD,IAAAA,MAAM,CAACE,KAAP,GAAeC,MAAM,CAACC,UAAtB;AACAJ,IAAAA,MAAM,CAACK,MAAP,GAAgBF,MAAM,CAACG,WAAvB;AAEA,UAAMC,OAAO,GAAGP,MAAM,CAACQ,UAAP,CAAkB,IAAlB,CAAhB;AACAD,IAAAA,OAAO,CAACE,OAAR,GAAkB,OAAlB;AACAF,IAAAA,OAAO,CAACG,WAAR,GAAsB,SAAtB;AACAH,IAAAA,OAAO,CAACI,SAAR,GAAoB,CAApB;AACAd,IAAAA,UAAU,CAACI,OAAX,GAAqBM,OAArB;AAEH,GAXQ,EAWN,EAXM,CAAT;;AAaA,QAAMK,YAAY,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAmB;AAAA,UAC7BC,OAD6B,GACTD,WADS,CAC7BC,OAD6B;AAAA,UACpBC,OADoB,GACTF,WADS,CACpBE,OADoB;AAEpClB,IAAAA,UAAU,CAACI,OAAX,CAAmBe,SAAnB;AACAnB,IAAAA,UAAU,CAACI,OAAX,CAAmBgB,MAAnB,CAA0BH,OAA1B,EAAmCC,OAAnC;AACAhB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GALD;;AAOA,QAAMmB,aAAa,GAAG,MAAM;AACxBrB,IAAAA,UAAU,CAACI,OAAX,CAAmBkB,SAAnB;AACApB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAKA,QAAMqB,IAAI,GAAG,CAAC;AAACP,IAAAA;AAAD,GAAD,KAAkB;AAC3B,QAAG,CAACf,SAAJ,EAAc;AACV;AACH;;AAH0B,UAIpBgB,OAJoB,GAIAD,WAJA,CAIpBC,OAJoB;AAAA,UAIXC,OAJW,GAIAF,WAJA,CAIXE,OAJW;AAK3BlB,IAAAA,UAAU,CAACI,OAAX,CAAmBoB,MAAnB,CAA0BP,OAA1B,EAAmCC,OAAnC;AACAlB,IAAAA,UAAU,CAACI,OAAX,CAAmBqB,MAAnB;AAEH,GARD;;AAUA,SACI;AACA,IAAA,WAAW,EAAEV,YADb;AAEA,IAAA,SAAS,EAAEM,aAFX;AAGA,IAAA,WAAW,EAAEE,IAHb;AAIA,IAAA,GAAG,EAAExB,SAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAOH;;AAED,eAAeD,MAAf,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\r\nimport React, {useRef, useEffect, useState} from 'react'\r\n\r\n\r\n\r\nfunction Canvas(){\r\n\r\n    const canvasRef = useRef(null)\r\n    const contextRef = useRef(null)\r\n    const [isDrawing, setIsDrawing] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n\r\n        const context = canvas.getContext('2d')\r\n        context.lineCap = \"round\";\r\n        context.strokeStyle = \"#8CA99A\";\r\n        context.lineWidth = 5;\r\n        contextRef.current = context;\r\n        \r\n    }, [])\r\n\r\n    const startDrawing = ({nativeEvent}) => {\r\n        const {offsetX, offsetY} = nativeEvent;\r\n        contextRef.current.beginPath()\r\n        contextRef.current.moveTo(offsetX, offsetY)\r\n        setIsDrawing(true)\r\n    }\r\n\r\n    const finishDrawing = () => {\r\n        contextRef.current.closePath()\r\n        setIsDrawing(false)\r\n    }\r\n\r\n    const draw = ({nativeEvent}) =>{\r\n        if(!isDrawing){\r\n            return\r\n        }\r\n        const {offsetX, offsetY} = nativeEvent\r\n        contextRef.current.lineTo(offsetX, offsetY)\r\n        contextRef.current.stroke()\r\n\r\n    }\r\n\r\n    return (\r\n        <canvas \r\n        onMouseDown={startDrawing} \r\n        onMouseUp={finishDrawing} \r\n        onMouseMove={draw} \r\n        ref={canvasRef}></canvas>\r\n    )\r\n}\r\n\r\nexport default Canvas;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// constructor(x, y){\r\n//     this.x = x;\r\n//     this.y = y;\r\n//     this.speedX = Math.random() * 4 - 2;\r\n//     this.speedY = Math.random() * 4 - 2;\r\n//     this.maxSize = Math.random() * 7 + 5;\r\n//     this.size = Math.random() * 1 + 2;\r\n// }\r\n\r\n// update(){\r\n//     ctx = canvas.getContext('2d')\r\n//     this.x += this.speedX;\r\n//     this.y += this.speedY;\r\n//     this.size += 0.1;\r\n//     if (this.size < this.maxSize){\r\n//         ctx.beginPath();\r\n//         ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\r\n//         ctx.fillStyle = 'hsl(140,100%,50%)';\r\n//         ctx.fill();\r\n//         ctx.stroke();\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}