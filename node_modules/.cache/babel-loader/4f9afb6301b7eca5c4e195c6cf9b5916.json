{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\King Riz\\\\Downloads\\\\insta-repo-app-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\King Riz\\\\Downloads\\\\insta-repo-app-master\\\\src\\\\Pages\\\\Canvas\\\\Canvas.js\";\nimport React, { useRef, useEffect, useState } from 'react';\n\nfunction Canvas() {\n  var position = {\n    x: 0,\n    y: window.innerHeight / 2\n  };\n  var counter = 0;\n  var minFontSize = 3;\n  var angleDistortion = 0;\n  var letters = \"There was a table set out under a tree in front of the house, and the March Hare and the Hatter were having tea at it: a Dormouse was sitting between them, fast asleep, and the other two were using it as a cushion, resting their elbows on it, and talking over its head. 'Very uncomfortable for the Dormouse,' thought Alice; 'only, as it's asleep, I suppose it doesn't mind.'\"; // Drawing variables\n\n  var canvas = canvasRef.current;\n  var context = useRef(null);\n  var mouse = {\n    x: 0,\n    y: 0,\n    down: false\n  };\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isDrawing = _useState2[0],\n        setIsDrawing = _useState2[1];\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    const context = canvas.getContext('2d');\n    context.lineCap = \"round\";\n    context.strokeStyle = \"#8CA99A\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n  }, []);\n\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    var d = distance(position, mouse);\n    var fontSize = minFontSize + d / 2;\n    var letter = letters[counter];\n    var stepSize = textWidth(letter, fontSize);\n\n    if (d > stepSize) {\n      var angle = Math.atan2(mouse.y - position.y, mouse.x - position.x);\n      context.font = fontSize + \"px Georgia\";\n      context.save();\n      context.translate(position.x, position.y);\n      context.rotate(angle);\n      context.fillText(letter, 0, 0);\n      context.restore();\n      counter++;\n\n      if (counter > letters.length - 1) {\n        counter = 0;\n      } //console.log (position.x + Math.cos( angle ) * stepSize)\n\n\n      position.x = position.x + Math.cos(angle) * stepSize;\n      position.y = position.y + Math.sin(angle) * stepSize;\n    }\n\n    const offsetX = nativeEvent.offsetX,\n          offsetY = nativeEvent.offsetY;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  function textWidth(string, size) {\n    context.font = size + \"px Georgia\";\n\n    if (context.fillText) {\n      return context.measureText(string).width;\n    } else if (context.mozDrawText) {\n      return context.mozMeasureText(string);\n    }\n  }\n\n  ;\n\n  function distance(pt, pt2) {\n    var xs = 0;\n    var ys = 0;\n    xs = pt2.x - pt.x;\n    xs = xs * xs;\n    ys = pt2.y - pt.y;\n    ys = ys * ys;\n    return Math.sqrt(xs + ys);\n  }\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const offsetX = nativeEvent.offsetX,\n          offsetY = nativeEvent.offsetY;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  return React.createElement(\"canvas\", {\n    onMouseDown: startDrawing,\n    onMouseUp: finishDrawing,\n    onMouseMove: draw,\n    ref: canvasRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  });\n}\n\nexport default Canvas; // constructor(x, y){\n//     this.x = x;\n//     this.y = y;\n//     this.speedX = Math.random() * 4 - 2;\n//     this.speedY = Math.random() * 4 - 2;\n//     this.maxSize = Math.random() * 7 + 5;\n//     this.size = Math.random() * 1 + 2;\n// }\n// update(){\n//     ctx = canvas.getContext('2d')\n//     this.x += this.speedX;\n//     this.y += this.speedY;\n//     this.size += 0.1;\n//     if (this.size < this.maxSize){\n//         ctx.beginPath();\n//         ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n//         ctx.fillStyle = 'hsl(140,100%,50%)';\n//         ctx.fill();\n//         ctx.stroke();\n//     }\n// }","map":{"version":3,"sources":["C:\\Users\\King Riz\\Downloads\\insta-repo-app-master\\src\\Pages\\Canvas\\Canvas.js"],"names":["React","useRef","useEffect","useState","Canvas","position","x","y","window","innerHeight","counter","minFontSize","angleDistortion","letters","canvas","canvasRef","current","context","mouse","down","contextRef","isDrawing","setIsDrawing","width","innerWidth","height","getContext","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","d","distance","fontSize","letter","stepSize","textWidth","angle","Math","atan2","font","save","translate","rotate","fillText","restore","length","cos","sin","offsetX","offsetY","beginPath","moveTo","string","size","measureText","mozDrawText","mozMeasureText","pt","pt2","xs","ys","sqrt","finishDrawing","closePath","draw","lineTo","stroke"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAIA,SAASC,MAAT,GAAkB;AAGd,MAAIC,QAAQ,GAAG;AAAEC,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAEC,MAAM,CAACC,WAAP,GAAqB;AAAhC,GAAf;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,eAAe,GAAG,CAAtB;AACA,MAAIC,OAAO,GAAG,wXAAd,CAPc,CASd;;AACA,MAAIC,MAAM,GAAGC,SAAS,CAACC,OAAvB;AACA,MAAIC,OAAO,GAAEhB,MAAM,CAAC,IAAD,CAAnB;AACA,MAAIiB,KAAK,GAAG;AAAEZ,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE,CAAX;AAAcY,IAAAA,IAAI,EAAE;AAApB,GAAZ;AAGA,QAAMJ,SAAS,GAAGd,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMmB,UAAU,GAAGnB,MAAM,CAAC,IAAD,CAAzB;;AAhBc,oBAiBoBE,QAAQ,CAAC,KAAD,CAjB5B;AAAA;AAAA,QAiBPkB,SAjBO;AAAA,QAiBIC,YAjBJ;;AAmBdpB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,MAAM,GAAGC,SAAS,CAACC,OAAzB;AACAF,IAAAA,MAAM,CAACS,KAAP,GAAef,MAAM,CAACgB,UAAtB;AACAV,IAAAA,MAAM,CAACW,MAAP,GAAgBjB,MAAM,CAACC,WAAvB;AAEA,UAAMQ,OAAO,GAAGH,MAAM,CAACY,UAAP,CAAkB,IAAlB,CAAhB;AACAT,IAAAA,OAAO,CAACU,OAAR,GAAkB,OAAlB;AACAV,IAAAA,OAAO,CAACW,WAAR,GAAsB,SAAtB;AACAX,IAAAA,OAAO,CAACY,SAAR,GAAoB,CAApB;AACAT,IAAAA,UAAU,CAACJ,OAAX,GAAqBC,OAArB;AAEH,GAXQ,EAWN,EAXM,CAAT;;AAaA,QAAMa,YAAY,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAqB;AAEtC,QAAIC,CAAC,GAAGC,QAAQ,CAAC5B,QAAD,EAAWa,KAAX,CAAhB;AACA,QAAIgB,QAAQ,GAAGvB,WAAW,GAAGqB,CAAC,GAAG,CAAjC;AACA,QAAIG,MAAM,GAAGtB,OAAO,CAACH,OAAD,CAApB;AACA,QAAI0B,QAAQ,GAAGC,SAAS,CAACF,MAAD,EAASD,QAAT,CAAxB;;AAEA,QAAIF,CAAC,GAAGI,QAAR,EAAkB;AACd,UAAIE,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWtB,KAAK,CAACX,CAAN,GAAUF,QAAQ,CAACE,CAA9B,EAAiCW,KAAK,CAACZ,CAAN,GAAUD,QAAQ,CAACC,CAApD,CAAZ;AAEAW,MAAAA,OAAO,CAACwB,IAAR,GAAeP,QAAQ,GAAG,YAA1B;AAEAjB,MAAAA,OAAO,CAACyB,IAAR;AACAzB,MAAAA,OAAO,CAAC0B,SAAR,CAAkBtC,QAAQ,CAACC,CAA3B,EAA8BD,QAAQ,CAACE,CAAvC;AACAU,MAAAA,OAAO,CAAC2B,MAAR,CAAeN,KAAf;AACArB,MAAAA,OAAO,CAAC4B,QAAR,CAAiBV,MAAjB,EAAyB,CAAzB,EAA4B,CAA5B;AACAlB,MAAAA,OAAO,CAAC6B,OAAR;AAEApC,MAAAA,OAAO;;AACP,UAAIA,OAAO,GAAGG,OAAO,CAACkC,MAAR,GAAiB,CAA/B,EAAkC;AAC9BrC,QAAAA,OAAO,GAAG,CAAV;AACH,OAda,CAgBd;;;AACAL,MAAAA,QAAQ,CAACC,CAAT,GAAaD,QAAQ,CAACC,CAAT,GAAaiC,IAAI,CAACS,GAAL,CAASV,KAAT,IAAkBF,QAA5C;AACA/B,MAAAA,QAAQ,CAACE,CAAT,GAAaF,QAAQ,CAACE,CAAT,GAAagC,IAAI,CAACU,GAAL,CAASX,KAAT,IAAkBF,QAA5C;AAEH;;AA3BqC,UA8B9Bc,OA9B8B,GA8BTnB,WA9BS,CA8B9BmB,OA9B8B;AAAA,UA8BrBC,OA9BqB,GA8BTpB,WA9BS,CA8BrBoB,OA9BqB;AA+BtC/B,IAAAA,UAAU,CAACJ,OAAX,CAAmBoC,SAAnB;AACAhC,IAAAA,UAAU,CAACJ,OAAX,CAAmBqC,MAAnB,CAA0BH,OAA1B,EAAmCC,OAAnC;AACA7B,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAlCD;;AAoCA,WAASe,SAAT,CAAoBiB,MAApB,EAA4BC,IAA5B,EAAmC;AAC/BtC,IAAAA,OAAO,CAACwB,IAAR,GAAec,IAAI,GAAG,YAAtB;;AAEA,QAAKtC,OAAO,CAAC4B,QAAb,EAAwB;AACtB,aAAO5B,OAAO,CAACuC,WAAR,CAAqBF,MAArB,EAA8B/B,KAArC;AACD,KAFD,MAEO,IAAKN,OAAO,CAACwC,WAAb,EAA0B;AAC/B,aAAOxC,OAAO,CAACyC,cAAR,CAAwBJ,MAAxB,CAAP;AACD;AAED;;AAAA;;AAEJ,WAASrB,QAAT,CAAmB0B,EAAnB,EAAuBC,GAAvB,EAA4B;AAExB,QAAIC,EAAE,GAAG,CAAT;AACA,QAAIC,EAAE,GAAG,CAAT;AAEAD,IAAAA,EAAE,GAAGD,GAAG,CAACtD,CAAJ,GAAQqD,EAAE,CAACrD,CAAhB;AACAuD,IAAAA,EAAE,GAAGA,EAAE,GAAGA,EAAV;AAEAC,IAAAA,EAAE,GAAGF,GAAG,CAACrD,CAAJ,GAAQoD,EAAE,CAACpD,CAAhB;AACAuD,IAAAA,EAAE,GAAGA,EAAE,GAAGA,EAAV;AAEA,WAAOvB,IAAI,CAACwB,IAAL,CAAWF,EAAE,GAAGC,EAAhB,CAAP;AACD;;AAEH,QAAME,aAAa,GAAG,MAAM;AACxB5C,IAAAA,UAAU,CAACJ,OAAX,CAAmBiD,SAAnB;AACA3C,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAKA,QAAM4C,IAAI,GAAG,CAAC;AAAEnC,IAAAA;AAAF,GAAD,KAAqB;AAC9B,QAAI,CAACV,SAAL,EAAgB;AACZ;AACH;;AAH6B,UAItB6B,OAJsB,GAIDnB,WAJC,CAItBmB,OAJsB;AAAA,UAIbC,OAJa,GAIDpB,WAJC,CAIboB,OAJa;AAK9B/B,IAAAA,UAAU,CAACJ,OAAX,CAAmBmD,MAAnB,CAA0BjB,OAA1B,EAAmCC,OAAnC;AACA/B,IAAAA,UAAU,CAACJ,OAAX,CAAmBoD,MAAnB;AAEH,GARD;;AAUA,SACI;AACI,IAAA,WAAW,EAAEtC,YADjB;AAEI,IAAA,SAAS,EAAEkC,aAFf;AAGI,IAAA,WAAW,EAAEE,IAHjB;AAII,IAAA,GAAG,EAAEnD,SAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAOH;;AAED,eAAeX,MAAf,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\r\nimport React, { useRef, useEffect, useState } from 'react'\r\n\r\n\r\n\r\nfunction Canvas() {\r\n\r\n\r\n    var position = { x: 0, y: window.innerHeight / 2 };\r\n    var counter = 0;\r\n    var minFontSize = 3;\r\n    var angleDistortion = 0;\r\n    var letters = \"There was a table set out under a tree in front of the house, and the March Hare and the Hatter were having tea at it: a Dormouse was sitting between them, fast asleep, and the other two were using it as a cushion, resting their elbows on it, and talking over its head. 'Very uncomfortable for the Dormouse,' thought Alice; 'only, as it's asleep, I suppose it doesn't mind.'\";\r\n\r\n    // Drawing variables\r\n    var canvas = canvasRef.current;\r\n    var context= useRef(null);\r\n    var mouse = { x: 0, y: 0, down: false }\r\n\r\n\r\n    const canvasRef = useRef(null)\r\n    const contextRef = useRef(null)\r\n    const [isDrawing, setIsDrawing] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n\r\n        const context = canvas.getContext('2d')\r\n        context.lineCap = \"round\";\r\n        context.strokeStyle = \"#8CA99A\";\r\n        context.lineWidth = 5;\r\n        contextRef.current = context;\r\n\r\n    }, [])\r\n\r\n    const startDrawing = ({ nativeEvent }) => {\r\n\r\n        var d = distance(position, mouse);\r\n        var fontSize = minFontSize + d / 2;\r\n        var letter = letters[counter];\r\n        var stepSize = textWidth(letter, fontSize);\r\n\r\n        if (d > stepSize) {\r\n            var angle = Math.atan2(mouse.y - position.y, mouse.x - position.x);\r\n\r\n            context.font = fontSize + \"px Georgia\";\r\n\r\n            context.save();\r\n            context.translate(position.x, position.y);\r\n            context.rotate(angle);\r\n            context.fillText(letter, 0, 0);\r\n            context.restore();\r\n\r\n            counter++;\r\n            if (counter > letters.length - 1) {\r\n                counter = 0;\r\n            }\r\n\r\n            //console.log (position.x + Math.cos( angle ) * stepSize)\r\n            position.x = position.x + Math.cos(angle) * stepSize;\r\n            position.y = position.y + Math.sin(angle) * stepSize;\r\n\r\n        }\r\n\r\n\r\n        const { offsetX, offsetY } = nativeEvent;\r\n        contextRef.current.beginPath()\r\n        contextRef.current.moveTo(offsetX, offsetY)\r\n        setIsDrawing(true)\r\n    }\r\n\r\n    function textWidth( string, size ) {\r\n        context.font = size + \"px Georgia\";\r\n        \r\n        if ( context.fillText ) {\r\n          return context.measureText( string ).width;\r\n        } else if ( context.mozDrawText) {\r\n          return context.mozMeasureText( string );\r\n        }\r\n        \r\n       };\r\n\r\n    function distance( pt, pt2 ){\r\n  \r\n        var xs = 0;\r\n        var ys = 0;\r\n       \r\n        xs = pt2.x - pt.x;\r\n        xs = xs * xs;\r\n       \r\n        ys = pt2.y - pt.y;\r\n        ys = ys * ys;\r\n       \r\n        return Math.sqrt( xs + ys );\r\n      }\r\n\r\n    const finishDrawing = () => {\r\n        contextRef.current.closePath()\r\n        setIsDrawing(false)\r\n    }\r\n\r\n    const draw = ({ nativeEvent }) => {\r\n        if (!isDrawing) {\r\n            return\r\n        }\r\n        const { offsetX, offsetY } = nativeEvent\r\n        contextRef.current.lineTo(offsetX, offsetY)\r\n        contextRef.current.stroke()\r\n\r\n    }\r\n\r\n    return (\r\n        <canvas\r\n            onMouseDown={startDrawing}\r\n            onMouseUp={finishDrawing}\r\n            onMouseMove={draw}\r\n            ref={canvasRef}></canvas>\r\n    )\r\n}\r\n\r\nexport default Canvas;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// constructor(x, y){\r\n//     this.x = x;\r\n//     this.y = y;\r\n//     this.speedX = Math.random() * 4 - 2;\r\n//     this.speedY = Math.random() * 4 - 2;\r\n//     this.maxSize = Math.random() * 7 + 5;\r\n//     this.size = Math.random() * 1 + 2;\r\n// }\r\n\r\n// update(){\r\n//     ctx = canvas.getContext('2d')\r\n//     this.x += this.speedX;\r\n//     this.y += this.speedY;\r\n//     this.size += 0.1;\r\n//     if (this.size < this.maxSize){\r\n//         ctx.beginPath();\r\n//         ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\r\n//         ctx.fillStyle = 'hsl(140,100%,50%)';\r\n//         ctx.fill();\r\n//         ctx.stroke();\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}